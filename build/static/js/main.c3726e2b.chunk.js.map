{"version":3,"sources":["components/ShowImages/index.js","components/UploadImage/index.js","App.js","serviceWorker.js","index.js"],"names":["ShowImages","this","props","original","sketchUrl","console","log","className","alt","src","window","URL","createObjectURL","download","name","href","title","Component","axios","require","ImageUpload","onDrop","files","a","setState","picture","loading","data","FormData","append","method","url","headers","then","response","catch","err","state","size","color","withIcon","buttonText","onChange","imgExtension","maxFileSize","App","target","UploadImage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0RA+CeA,E,uKA3CH,IAAD,EACyBC,KAAKC,MAA7BC,EADD,EACCA,SAAUC,EADX,EACWA,UAIlB,OAHAC,QAAQC,IAAI,CAAEH,WAAUC,cACxBC,QAAQC,IAAIH,GAAYC,GAEpBD,GAAYC,EAEZ,oCACE,yBAAKG,UAAU,WACb,yBAAKA,UAAU,UACb,4BAAQA,UAAU,UAChB,yBACEC,IAAI,WACJC,IAAKC,OAAOC,IAAIC,gBAAgBT,OAItC,yBAAKI,UAAU,UACb,4BAAQA,UAAU,UAChB,yBAAKC,IAAI,SAASC,IAAKL,OAI7B,yBAAKG,UAAU,WACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,UACb,uBACEM,SAAQ,UAAKV,EAASW,KAAd,eACRC,KAAMX,EACNY,MAAM,YAHR,aAQF,yBAAKT,UAAU,aAKd,S,GAxCYU,aCEnBC,EAAQC,EAAQ,IA8DPC,E,kDA3Db,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAQRmB,OATmB,uCASV,WAAOC,GAAP,eAAAC,EAAA,sDACP,EAAKC,SAAS,CACZC,QAASH,EAAM,GACfI,SAAS,KAELC,EAAO,IAAIC,UACZC,OAAO,UAAWP,EAAM,IAC7BJ,EAAM,CACJY,OAAQ,OACRC,IAAK,kDACLC,QAAS,CACP,eAAgB,uBAElBL,SAECM,KARH,+BAAAV,EAAA,MAQQ,WAAOW,GAAP,SAAAX,EAAA,sDACJ,EAAKC,SAAS,CAAEE,SAAS,EAAOtB,UAAW8B,EAASP,OADhD,2CARR,uDAWGQ,MAXH,+BAAAZ,EAAA,MAWS,WAAOa,GAAP,SAAAb,EAAA,sDACLlB,QAAQC,IAAI,wBAAyB8B,GACrC,EAAKZ,SAAS,CAAEE,SAAS,IAFpB,2CAXT,uDAPO,2CATU,sDAEjB,EAAKW,MAAQ,CACXZ,QAAS,KACTC,SAAS,EACTtB,UAAW,MALI,E,qDAkCjB,OAA2B,IAAvBH,KAAKoC,MAAMX,QAEX,yBAAKnB,UAAU,aACb,kBAAC,cAAD,CAAa+B,KAAM,IAAKC,MAAM,YAKhC,6BACE,kBAAC,IAAD,CACEC,UAAU,EACVC,WAAW,eACXC,SAAUzC,KAAKoB,OACfsB,aAAc,CAAC,OAAQ,OAAQ,OAAQ,QACvCC,YAAa,UAEf,kBAAC,EAAD,CACEzC,SAAUF,KAAKoC,MAAMZ,QACrBrB,UAAWH,KAAKoC,MAAMjC,iB,GArDRa,aC2BX4B,MA7Bf,WACE,OACE,yBAAKtC,UAAU,OACb,6BAASA,UAAU,2BACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,oBACA,uBACEuC,OAAO,SACP/B,KAAK,oCACLR,UAAU,6BAHZ,gCAUN,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WAEf,yBAAKA,UAAU,UACb,kBAACwC,EAAD,OAEF,yBAAKxC,UAAU,cChBHyC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.c3726e2b.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\nimport React, { Component } from \"react\";\n\nclass ShowImages extends Component {\n  render() {\n    const { original, sketchUrl } = this.props;\n    console.log({ original, sketchUrl });\n    console.log(original && sketchUrl);\n\n    if (original && sketchUrl) {\n      return (\n        <>\n          <div className=\"columns\">\n            <div className=\"column\">\n              <figure className=\"image \">\n                <img\n                  alt=\"uploaded\"\n                  src={window.URL.createObjectURL(original)}\n                />\n              </figure>\n            </div>\n            <div className=\"column\">\n              <figure className=\"image \">\n                <img alt=\"sketch\" src={sketchUrl} />\n              </figure>\n            </div>\n          </div>\n          <div className=\"columns\">\n            <div className=\"column\" />\n            <div className=\"column\">\n              <a\n                download={`${original.name}_sketch.jpg`}\n                href={sketchUrl}\n                title=\"DOWNLOAD\"\n              >\n                DOWNLOAD\n              </a>\n            </div>\n            <div className=\"column\" />\n          </div>\n        </>\n      );\n    } else {\n      return null;\n    }\n  }\n}\nexport default ShowImages;\n","import React, { Component } from \"react\";\nimport ImageUploader from \"react-images-upload\";\nimport { ClockLoader } from \"react-spinners\";\n\nimport ShowImages from \"../ShowImages\";\nconst axios = require(\"axios\");\n\nclass ImageUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      picture: null,\n      loading: false,\n      sketchUrl: null,\n    };\n  }\n\n  onDrop = async (files) => {\n    this.setState({\n      picture: files[0],\n      loading: true,\n    });\n    const data = new FormData();\n    data.append(\"picture\", files[0]);\n    axios({\n      method: \"post\",\n      url: \"https://imagetosketch.herokuapp.com/api/sketch/\",\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      data,\n    })\n      .then(async (response) => {\n        this.setState({ loading: false, sketchUrl: response.data });\n      })\n      .catch(async (err) => {\n        console.log(\"Error in Image Upload\", err);\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    if (this.state.loading === true)\n      return (\n        <div className=\"centerall\">\n          <ClockLoader size={150} color=\"purple\" />\n        </div>\n      );\n    else\n      return (\n        <div>\n          <ImageUploader\n            withIcon={true}\n            buttonText=\"Choose image\"\n            onChange={this.onDrop}\n            imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\n            maxFileSize={5242880}\n          />\n          <ShowImages\n            original={this.state.picture}\n            sketchUrl={this.state.sketchUrl}\n          />\n        </div>\n      );\n  }\n}\n\nexport default ImageUpload;\n","/* eslint-disable react/jsx-no-target-blank */\n/* eslint-disable jsx-a11y/anchor-has-content */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport UploadImage from \"./components/UploadImage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className=\"hero is-primary is-bold\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">Image to Sketch </h1>\n            <a\n              target=\"_blank\"\n              href=\"https://github.com/aashutoshpanda\"\n              className=\"give-padding fa fa-github\"\n            >\n              Check out the Source Code\n            </a>\n          </div>\n        </div>\n      </section>\n      <div className=\"columns\">\n        <div className=\"column\" />\n\n        <div className=\"column\">\n          <UploadImage />\n        </div>\n        <div className=\"column\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}